

回调函数：函数A作为参数（函数引用）传递到另一个函数B中，并且这个函数B执行函数A，我们就认为函数A叫做回调函数。如果为匿名函数，称之为匿名回调函数。
异步和同步：ajax的异步加载用到了回调函数 （相对主函数独立）



回调函数和闭包的关系：
实质没有太大关系，相似之处：函数内部有另外一个函数（回调为先将函数指针传入，待合适的时间调用，闭包为事先在函数A内部定义另一个函数B）

回调函数定义：回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用为调用它所指向的函数时，我们就说这是回调函数。

英文定义：A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.

注意：回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。

A = (x) => {console.log(x)};
B = (callback) => {
    let y = 1;
    callback(y);
 }
B(A);

回调函数使用场景：
资源加载：动态加载js文件后执行回调，加载iframe后执行回调，ajax操作回调，图片加载完成后执行回调等等；
DOM事件以及Node.js事件基于回调机制（Node.js回调可能会出现多层回调嵌套的问题）
setTimeout的延时时间设置为0,（这是一个hack),setTimeout调用的函数其实就是一个callback的体现；

闭包定义：函数A内定义的另一个函数B，而函数B可以使用函数A中定义的局部变量（注意，作为返回值得时候，就是从函数A的外部读取其内部变量），那么函数B就作为闭包。

闭包用途：1. 可以读取函数内部的变量； 2. 让这些变量的值始终保持在内存中。

function A() {
    var n = 999;
    nAdd = function() {n+=1} //未定义关键字var, 作为全局变量，（匿名函数闭包，相当于一个setter，可以在函数外部对函数内部的局部变量进行操作）
    function B() {
        alert(n)
    }
    return B; //返回并形成B函数作用域链（相当于延续了f1的作用域链）
}
var result = A(); //A这个函数被调用完后清楚，但其局部变量保存在内存中，延续在B的作用域链上；
result(); // 999
nAdd();
result(); //1000

危，注意：
1. 由于闭包将父函数的变量都保存在内存中，将导致内存消耗很大；如果滥用，将会造成网页的性能问题，在IE中可能导致内存泄漏。解决方法： 退出函数之前，将不使用的局部变量全部删除（可以设置为null)
2. 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。

