1. 含义
Promise 是异步编程的一种解决方案，比传统的解决方案--回调函数和事件--更合理和强大；最早由社区提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象；
所谓Promise，简单来说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上来说，Promise是一个对象，从它可以获取异步操作的消息。Promise提供统一的API，各种异步操作都可以用相同的方法进行处理。

Promise对象的两个特点：
1）对象的状态不受外界影响。 Promise对象代表一个异步操作，有三种状态：pending进行中/fulfilled已成功/rejected已失败。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。“承诺”的由来，表示其他手段无法改变。
2）一旦状态改变，就不会再变。任何时候都可以得到这个结果。
对象状态的改变：pending->fulfilled / pending->rejected
只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这个时候就称之为resolved（已定型），如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。

有了Promise对象，就可以将一部操作以同步操作的流程表达出来，避免层层嵌套的回调函数。此外，promise对象提供统一的接口，是的操控异步操作更加容易。

Promise缺点：
1）无法取消Promise，一旦新建他就会立即执行，无法中途取消。
2）如果不设置回调函数，Promise内部抛出的错误，就不会反应到外部。
3）当处于pending状态时，无法得知目前进展到哪个阶段

如果某些事件不断地反复发生，一般来说，使用stream模式比部署promise更好。

2. 基本用法
ES6规定，Promise对象是一个构造函数，用来生成Promise实例.
1) 创建实例
const promise = new Promise((resolve, reject)=>{ //(resolve, reject)它们是两个函数，由 JavaScript 引擎提供，不用自己部署。
    // code
    if(异步操作成功){
        resolve(value);
    }else{
        reject(error);
    }
})

resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。

2）回调状态
promise.then((value)=>{
    //success
},(error)=>{ //可选
    //failure
});
then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。


